<apex:page controller="CommerceConfigurationPunchinController" lightningStylesheets="true" title="Logik Configuration Window" showHeader="false" sidebar="false" html-style="height: 100%">
  <head>
    <apex:slds/>
    <apex:includeScript value="{!URLFOR($Resource.LGK__easyXDM, '/easyXDM.min.js')}"/>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <meta name="theme-color" content="#000000"/>
    <meta name="description" content="Logik Configuration Window"/>
    <style>
      iframe { 
        width:100%;
        height:100%;
      }
      #logik-configuration-window{
        position: fixed;
        height: 100%;
        width: 100%;
      }
    </style>
    <script type="text/javascript" src="{!URLFOR($Resource.LGK__easyXDM, '/easyXDM.min.js')}" crossorigin="anonymous"></script>
    <script src="/soap/ajax/55.0/connection.js" type="text/javascript"></script>
    <script src="/soap/ajax/55.0/apex.js" type="text/javascript"></script>
    <script type="text/javascript">
      var logikUrl = "{!$Setup.LGK__ConfigurationTenant__c.LGK__RuntimeUrl__c}";
      if (logikUrl.startsWith('http://')) {
        logikUrl = logikUrl.replace('http://', 'https://');
      }
      else if (!logikUrl.startsWith('https://')) {
        logikUrl = 'https://' + logikUrl;
      }
      if (!logikUrl.includes('logik.io')) {
          console.warn("Warning: Configurable product endpoint is not in the logik.io domain.");
      }
      while (logikUrl.endsWith('/')) {
        logikUrl = logikUrl.slice(0, -1);
      }

      var rpc = new easyXDM.Rpc(
        {
          remote: logikUrl + "/ui/configure",
          container: "logik-configuration-window"
        },
        {
          // method defined in Logik
          remote: {
            postMessage: {}
          },
          local: {
            postMessage: function (message) {
              console.log('postMessage:' + message);
              processMessage(message);
            }
          }
        }
      );

      var initialConfigData = {
        "runtimeToken":"",  // Set this to the token for the Runtime Client created in Logik
        "product": {
          "configuredProductId": "{!$CurrentPage.parameters.productId}",
          "configurationAttributes": {
            "LGK__ConfigurationId__c": null
          },
          "optionConfigurations": {
            "Dynamic": [{
              "productId": null,
              "quantity": 1,
              "configurationData": {}
            }]
          },
          "configurationData": {}
        }
      };

      Visualforce.remoting.Manager.invokeAction(
        '{!$RemoteAction.CommerceConfigurationPunchinController.getLayoutName}',  // namespace, class, method
        '{!$CurrentPage.parameters.productId}', // method params
        function(result, event) {
          if (event.status) {  // aka if no error occurred
            if (result?.length > 0) {
              initialConfigData.layoutVarName = result;
            }

            // Remoting runs async, so the postMessage has to be included here otherwise it'll send the payload before retrieving the layout
            let initialConfigDataString = JSON.stringify(initialConfigData);
            console.log(initialConfigDataString);
            rpc.postMessage(initialConfigDataString);
          }
          else {
            console.log('Error in VF remoting:');
            console.log(event.message);
          }
        }
      );

      function processMessage(payload) {
        document.getElementsByClassName('slds-spinner_container')[0].style.display = 'block';
        document.getElementById('logik-configuration-window').style.display = 'none';

        if (payload.length > 0) {
          Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.CommerceConfigurationPunchinController.addToCart}',  // namespace, class, method
            payload, '{!$CurrentPage.parameters.communityId}', '{!$CurrentPage.parameters.accountId}', // method params
            function(result, event) {
              if (event.status) {  // aka if no error occurred
                console.log('addToCart invoked remotely. Target URL: {!$Site.CurrentSiteUrl}s/cart/' + result);
                window.location = '{!$Site.CurrentSiteUrl}s/cart/' + result;  //CurrentSiteUrl comes with a trailing /, change this to another Site parameter if that's not consistent across orgs
              }
              else {
                document.getElementsByClassName('slds-spinner_container')[0].style.display = 'none';  
                document.getElementById('apex-error-container').style.display = 'inline';
                document.getElementById('{!$Component.apexerror}').summary = event.message;
                document.getElementById("{!$Component.apexerror}").getElementsByClassName("messageText")[0].innerText = event.message;
              }
            }
          );
        }
        else {
          console.log('Cancel initiated. Target URL: {!$Site.CurrentSiteUrl}s/product/{!$CurrentPage.parameters.productId}');
          window.location = '{!$Site.CurrentSiteUrl}s/product/{!$CurrentPage.parameters.productId}';
        }
      };
    </script>
  </head>
  <body>
    <div id="apex-error-container" style="display:none; text-align:center;">
      <apex:pageMessage id="apexerror" severity="error" strength="2" rendered="true" title="Unexpected Error" summary="An error has occurred during Add to Cart."></apex:pageMessage>
    </div>
    <div class="slds-scope slds-spinner_container" style="display:none">
      <div role="status" class="slds-spinner slds-spinner_large slds-spinner_brand">
        <span class="slds-assistive-text">Loading</span>
        <div class="slds-spinner__dot-a"></div>
        <div class="slds-spinner__dot-b"></div>
      </div>
    </div>
    <div id="logik-configuration-window"/>
  </body>
</apex:page>